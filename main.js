!function(){"use strict";const e={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__submit-button",inactiveButtonClass:"modal__submit-button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},t=(e,t,a)=>{const r=t.id+"-error";e.querySelector("#"+r).textContent="",t.classList.remove(a.inputErrorClass)},a=(e,t,a)=>{(e=>Array.from(e).some(e=>!e.validity.valid))(e)?(t.classList.add(a.inactiveButtonClass),t.disabled=!0):(t.classList.remove(a.inactiveButtonClass),t.disabled=!1)},r=(e,a,r)=>{a.forEach(a=>{t(e,a,r)}),((e,t)=>{e.classList.add(t.inactiveButtonClass),e.disabled=!0})(e.querySelector(r.submitButtonSelector),r)};function o(e,t,a="Save",r="Saving..."){e.textContent=t?r:a}var n=class{constructor(e,t,a,r,o){this._data=e,this._templateSelector=t,this._handleLike=a,this._handleDelete=r,this._handlePreview=o,this._cardTemplate=document.querySelector(this._templateSelector).content}getCardElement(){const e=this._cardTemplate.cloneNode(!0).querySelector(".card"),t=e.querySelector(".card__title"),a=e.querySelector(".card__image"),r=e.querySelector(".card__like-button"),o=e.querySelector(".card__delete-button");return a.src=this._data.link,a.alt=this._data.name,t.textContent=this._data.name,this._data.isLiked&&r.classList.add("card__like-button_active"),r.addEventListener("click",e=>{this._handleLike(e,this._data)}),o.addEventListener("click",()=>this._handleDelete(e,this._data)),a.addEventListener("click",()=>{this._handlePreview(this._data)}),e}},s=class{constructor(e){this._modal=e,this._handleEscClose=this._handleEscClose.bind(this),this._closeButton=e.querySelector(".modal__close-button"),this._closeButton.addEventListener("click",()=>this.closeModal()),this._modal.addEventListener("click",e=>{e.target===this._modal&&this.closeModal()})}openModal(){this._modal.classList.add("modal_is-open"),document.addEventListener("keydown",this._handleEscClose)}closeModal(){this._modal.classList.remove("modal_is-open"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.closeModal()}};const l=new class{constructor({baseUrl:e,headers:t}){this._baseUrl=e,this._headers=t}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}getAppInfo(){return Promise.all([this.getInitialCards(),this.getUserInfo()])}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then(this._checkResponse)}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers}).then(this._checkResponse)}updateUserInfo([e,t]){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:t})}).then(this._checkResponse)}updateUserAvatar(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then(this._checkResponse)}addNewCard({name:e,link:t}){return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e,link:t})}).then(this._checkResponse)}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}changeLikeStatus(e,t){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:t?"PUT":"DELETE",headers:this._headers}).then(this._checkResponse)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"13cfda04-b97a-4769-ae32-a01aa8ac4519","Content-Type":"application/json"}}),i=new class{constructor({nameSelector:e,aboutSelector:t,avatarSelector:a}){this._nameElement=document.querySelector(e),this._aboutElement=document.querySelector(t),this._avatarElement=document.querySelector(a)}getUserInfo(){return{name:this._nameElement.textContent,about:this._aboutElement.textContent,avatar:this._avatarElement.src}}setUserInfo({name:e,about:t,avatar:a}){e&&(this._nameElement.textContent=e),t&&(this._aboutElement.textContent=t),a&&(this._avatarElement.src=a)}}({nameSelector:".profile__name",aboutSelector:".profile__description",avatarSelector:".profile__avatar"}),d={preview:new s(document.querySelector("#preview-modal")),editProfile:new s(document.querySelector("#edit-profile-modal")),newPost:new s(document.querySelector("#new-post-modal")),editAvatar:new s(document.querySelector("#edit-avatar-modal")),deleteCard:new s(document.querySelector("#delete-card-modal"))},c=document.querySelector(".modal__image"),u=document.querySelector(".modal__caption"),h=document.querySelector(".cards__list"),m=document.querySelector(".profile__edit-button"),_=document.querySelector("#edit-profile-modal .modal__form"),p=document.querySelector("#profile-name-input"),v=document.querySelector("#profile-description-input"),f=_.querySelector(".modal__submit-button"),S=document.querySelector(".profile__avatar-button"),b=document.querySelector("#edit-avatar-modal .modal__form"),y=document.querySelector("#profile-avatar-input"),E=b.querySelector(".modal__submit-button"),q=document.querySelector(".profile__post-button"),k=document.querySelector("#new-post-modal .modal__form"),C=document.querySelector("#image-link-input"),g=document.querySelector("#image-caption-input"),L=k.querySelector(".modal__submit-button"),w=document.querySelector(".modal__delete-button"),U=document.querySelector(".modal__cancel-button");let M,A;function I(e){c.src=e.link,c.alt=e.name,u.textContent=e.name,d.preview.openModal()}function P(e,t){M=e,A=t._id,d.deleteCard.openModal()}function D(e,t){const a=e.target,r=a.classList.contains("card__like-button_active");l.changeLikeStatus(t._id,!r).then(()=>{a.classList.toggle("card__like-button_active",!r)}).catch(e=>{console.error("Error changing like status:",e)})}var $;l.getAppInfo().then(([e,t])=>{e.forEach(e=>{const t=new n(e,"#card-template",D,P,I);h.append(t.getCardElement())}),i.setUserInfo({name:t.name,about:t.about,avatar:t.avatar})}).catch(e=>{console.error("Error fetching data:",e)}),m.addEventListener("click",()=>{const t=i.getUserInfo();p.value=t.name,v.value=t.about,d.editProfile.openModal(),r(_,_.querySelectorAll(".modal__input"),e)}),_.addEventListener("submit",function(e){e.preventDefault(),o(f,!0),l.updateUserInfo([p.value,v.value]).then(e=>{i.setUserInfo({name:e.name,about:e.about}),d.editProfile.closeModal(),_.reset()}).catch(e=>{console.error("Error updating user info:",e)}).finally(()=>{f.disabled=!1,o(f,!1)})}),q.addEventListener("click",()=>d.newPost.openModal()),k.addEventListener("submit",function(t){t.preventDefault(),o(L,!0),l.addNewCard({link:C.value,name:g.value}).then(t=>{const a=new n(t,"#card-template",D,P,I);h.prepend(a.getCardElement()),d.newPost.closeModal(),k.reset(),r(k,k.querySelectorAll(".modal__input"),e)}).catch(e=>{console.error("Error adding new card:",e)}).finally(()=>{L.disabled=!1,o(L,!1)})}),S.addEventListener("click",()=>d.editAvatar.openModal()),b.addEventListener("submit",function(e){e.preventDefault(),o(E,!0);const t=y.value;l.updateUserAvatar(t).then(e=>{i.setUserInfo({avatar:e.avatar}),d.editAvatar.closeModal(),b.reset()}).catch(e=>{console.error("Error updating avatar:",e)}).finally(()=>{E.disabled=!1,o(E,!1)})}),w.addEventListener("click",function(){o(w,!0,"Delete","Deleting..."),l.deleteCard(A).then(()=>{M.remove(),d.deleteCard.closeModal()}).catch(e=>{console.error("Error deleting card:",e)}).finally(()=>{w.disabled=!1,o(w,!1,"Delete","Deleting...")})}),U.addEventListener("click",()=>d.deleteCard.closeModal()),$=e,document.querySelectorAll($.formSelector).forEach(e=>{((e,r)=>{const o=e.querySelectorAll(r.inputSelector),n=e.querySelector(r.submitButtonSelector);o.forEach(s=>{s.addEventListener("input",()=>{((e,a,r)=>{a.validity.valid?t(e,a,r):((e,t,a,r)=>{const o=t.id+"-error";e.querySelector("#"+o).textContent=a,t.classList.add(r.inputErrorClass)})(e,a,a.validationMessage,r)})(e,s,r),a(o,n,r)})}),a(o,n,r)})(e,$)})}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,